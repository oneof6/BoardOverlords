<!DOCTYPE html>
<html>

<head>
    
    <script>
    window.gameSpace = {cardStack: []};
    
    function drawCard(){
        //Get a random index, max value size of card stack
        var idx = rollDice(gameSpace.cardStack.length)-1;
        //Show card from stack and remove card until stack is empty
        if(gameSpace.cardStack.length > 0){
            document.getElementById("enemyMode").innerHTML = '<img src="'+gameSpace.cardStack[idx]+'">';
            gameSpace.cardStack.splice(idx, 1);
        }else{
            document.getElementById("enemyMode").innerHTML = '<b>Build New Deck</b>';
        }
    }

    function buildDeck(){
        var game = document.getElementById("expansions").value;
        gameSpace.cardStack = getCardRegistry(game);
    }

    function getCardRegistry(game){
        //Base Game
        CardB01 = "assets/BaseGame/card1.png";
        CardB02 = "assets/BaseGame/card2.png";
        CardB03 = "assets/BaseGame/card3.png";
        CardB04 = "assets/BaseGame/card4.png";
        CardB05 = "assets/BaseGame/card5.png";
        CardB06 = "assets/BaseGame/card6.png";
        CardB07 = "assets/BaseGame/card7.png";
        CardB08 = "assets/BaseGame/card8.png";
        CardB09 = "assets/BaseGame/card9.png";
        CardB10 = "assets/BaseGame/card10.png";
        CardB11 = "assets/BaseGame/card11.png";
        CardB12 = "assets/BaseGame/card12.png";
        CardB13 = "assets/BaseGame/card13.png";
        CardB14 = "assets/BaseGame/card14.png";
        CardB15 = "assets/BaseGame/card15.png";

        switch(game){
            case 'kellarsKeep':
                CardKK21 = "assets/KellarsKeep/card21.png";
                CardKK22 = "assets/KellarsKeep/card22.png";
                CardKK23 = "assets/KellarsKeep/card23.png";
                CardKK24 = "assets/KellarsKeep/card24.png";
                CardKK25 = "assets/KellarsKeep/card25.png";
                return cardStack = [CardB01, CardB02, CardB03, CardB04, CardB05,
                                    CardB06, CardB07, CardB08, CardB09, CardB10,
                                    CardB11, CardB12, CardB13, CardB14, CardB15, 
                                    CardKK21, CardKK22, CardKK23, CardKK24, CardKK25];
                break;

            case 'witchLord':
                CardKK26 = "assets/WitchLord/card26.png";
                CardKK27 = "assets/WitchLord/card27.png";
                CardKK28 = "assets/WitchLord/card28.png";
                CardKK29 = "assets/WitchLord/card29.png";
                CardKK30 = "assets/WitchLord/card30.png";
                CardKK31 = "assets/WitchLord/card31.png";
                CardKK32 = "assets/WitchLord/card32.png";
                CardKK33 = "assets/WitchLord/card33.png";
                CardKK34 = "assets/WitchLord/card34.png";
                CardKK35 = "assets/WitchLord/card35.png";      
                return cardStack = [CardB01, CardB02, CardB03, CardB04, CardB05,
                                    CardB06, CardB07, CardB08, CardB09, CardB10,
                                    CardB11, CardB12, CardB13, CardB14, CardB15, 
                                    CardKK26, CardKK27, CardKK28, CardKK29, CardKK30,
                                    CardKK31, CardKK32, CardKK33, CardKK34, CardKK35];
                break;

            case 'ogre':
                CardKK36 = "assets/OgreHorde/card36.png";
                CardKK37 = "assets/OgreHorde/card37.png";
                CardKK38 = "assets/OgreHorde/card38.png";
                CardKK39 = "assets/OgreHorde/card39.png";
                CardKK40 = "assets/OgreHorde/card40.png"; 
                return cardStack = [CardB01, CardB02, CardB03, CardB04, CardB05,
                                    CardB06, CardB07, CardB08, CardB09, CardB10,
                                    CardB11, CardB12, CardB13, CardB14, CardB15, 
                                    CardKK36, CardKK37, CardKK38, CardKK39, CardKK40];
                break;

            default:
                return cardStack = [CardB01, CardB02, CardB03, CardB04, CardB05,
                                   CardB06, CardB07, CardB08, CardB09, CardB10,
                                   CardB11, CardB12, CardB13, CardB14, CardB15];
        }
    }

    function rollDice(sides){
        var rnd = Math.floor(Math.random() * sides);
        return rnd+1;
    }

    function cardOrder(){
        var inPlay =  document.getElementById('cardsInPlay').value;
        var order = '';

        order = order + rollDice(inPlay) + ', ';
        order = order + rollDice(inPlay) + ', ';
        order = order + rollDice(inPlay)

        document.getElementById('order').innerHTML = '<b>' + order + '</b>';
    }

    function rollD6(){
        var d6 = rollDice(6);
        document.getElementById('d6Field').innerHTML = '<img src="assets/d6BlackWhite.png"><b> -> ' + (d6) + '</b>';
    }

    function rollsPlus(){
        var val = document.getElementById('numberRolls').value;
        val++;
        document.getElementById('numberRolls').value = ""+val+"";
    }

    function rollsMinus(){
        var val = document.getElementById('numberRolls').value;
        val--;
        document.getElementById('numberRolls').value = ""+val+"";
    }

    //TODO - Card based solo mode
    /*
    - drawCard (get first el array, push array to remove first, display card from arr, reschuffle -1 if new round)
    - buildGameDeck(deckBase, deckX... according to settings base, base + ogre horde, etc. use checkboxess, concat arrays, RET: arr)
    - deckBase, deckOgreHorde, deckX (return arr of strings with paths to card image)
    */

    //Sleep function to wait some time e.g. for polling, time in millisecs
    function sleepFor( sleepDuration ){
        var now = new Date().getTime();
        while(new Date().getTime() < now + sleepDuration){ / do nothing / }
    }

    function execRolls(element){
        numOfRolls = document.getElementById("numberRolls").value;
        cleanDivs();
        renderRolls(numOfRolls);
    }   
     
    function renderRolls(numOfRolls){
        //Set null if no number
        if(!numOfRolls){
            numOfRolls = 0;
        }

        //Limit to max of div spots, which is 12
        if(numOfRolls > 12){
            numOfRolls = 12;
        }

        //cleanDivs();
        for(var i=0; i<numOfRolls; i++){
            var res = rollDice(6);
            
            //TODO - Sleep between runs, ot working without canvas 2d

            switch(res){
                case 1: document.getElementById('die' + i).innerHTML = '<img src="assets/HQShield.png">';
                break;
                case 2: document.getElementById('die' + i).innerHTML = '<img src="assets/HQShield.png">'; 
                break;
                case 3: document.getElementById('die' + i).innerHTML = '<img src="assets/HQSkull.png">';
                break;
                case 4: document.getElementById('die' + i).innerHTML = '<img src="assets/HQSkull.png">';
                break;
                case 5: document.getElementById('die' + i).innerHTML = '<img src="assets/HQSkull.png">';
                break;
                case 6: document.getElementById('die' + i).innerHTML = '<img src="assets/HQEnemyShield.png">';
                break;
            }
        }
    }

    function cleanDivs(numOfRolls) {
        //Clean divs
        for(var i=0; i<12; i++){
            var el = document.getElementById('die' + i);
            el.innerHTML = '';
        }
    }

    
    </script>


    <meta charset="UTF-8">
    <title>HS Overlord</title>
    <style>
        body{
            background: black;
            background-image: url('assets/heroBack.jpg');
            background-repeat: no-repeat;
            background-attachment: fixed; 
            background-size: 100% 100%;
        }
        canvas {
            background: white;
            width: 100%;
            max-width: 480px;
            margin: auto;
            display: block;
        }
        div {
            color: rgb(248, 171, 7);
            width: 100%;
            max-width: 480px;
            margin: auto;
            display: block;
        }
        
        table {
            float: left
        }
    </style>
</head>

<body>
    <table>
        <tr>
            <td>
                <select name="expansionsGroup" id="expansions">
                    <option value="">EXPANSION?</option>
                    <option value="kellarsKeep">Kellars Keep</option>
                    <option value="witchLord">Witchlord</option>
                    <option value="ogre">Ogre Horde</option>
                    <option value="dreadMoon">Dread Moon</option>
                    <option value="frozenHorror">Frozen Horror</option>
                    <option value="mageMirror">Mage Mirror</option>
                    <option value="spiritQueen">Spirit Queen</option>
                    <option value="telor">Telor</option>                   
                  </select>
            </td>
        </tr>
        <tr>
            <td><input type="button" id="buildDeck" value="Build Deck" onClick="buildDeck()"></td>
            <td><input type="button" id="draw" value="Draw Card" onClick="drawCard()">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>    
        </tr>
        <tr>
            <td><input type="button" id="d6" value="roll d6" onClick="rollD6()"></td>
            <td><div id="d6Field"><img src="assets/d6BlackWhite.png"></div></td>
        </tr>
        <tr>
            <td><input type="number" id="numberRolls" maxlength="2" size="2"><br>
                <input type="button" id="rollsInc" value=" + " onClick="rollsPlus()"><input type="button" id="rollsDec" value=" - " onClick="rollsMinus()">
            </td>
            <td><input type="button" id="roll" value="roll" onClick="execRolls()"></td>
        </tr>
    </table>

    <table class="centerTbl">
        <tr>
            <td><div id="die0"></div></td> <td><div id="die1"></div></td> <td><div id="die2"></div></td>
        </tr>
        <tr>
            <td><div id="die3"></div></td> <td><div id="die4"></div></td> <td><div id="die5"></div></td>
        </tr>
        <tr>
            <td><div id="die6"></div></td> <td><div id="die7"></div></td> <td><div id="die8"></div></td>
        </tr>
        <tr>
            <td><div id="die9"></div></td> <td><div id="die10"></div></td> <td><div id="die11"></div></td>
        </tr>
    </table>
    <br>
    <div id="enemyMode" style="clear:both"></div>
</body>

</html>
